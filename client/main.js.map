{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;;AACuD;AACQ;AACG;AACS;AACK;AACxB;;;AAExD,MAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,0EAAa,EAAC;IACrC,EAAC,IAAI,EAAC,OAAO,EAAC,SAAS,EAAC,6EAAc,EAAC,WAAW,EAAC,CAAC,kEAAS,CAAC,EAAC;IAC/D,EAAC,IAAI,EAAC,UAAU,EAAC,SAAS,EAAC,sFAAiB,EAAC,WAAW,EAAC,CAAC,kEAAS,CAAC,EAAC;IACrE,EAAC,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,2FAAkB,EAAC;IAC1C,EAAC,IAAI,EAAC,SAAS,EAAC,SAAS,EAAC,0EAAa,EAAC;IACxC,EAAC,IAAI,EAAC,OAAO,EAAC,SAAS,EAAC,0EAAa,EAAC;IACtC,EAAC,IAAI,EAAC,EAAE,EAAC,UAAU,EAAC,MAAM,EAAC,SAAS,EAAC,MAAM,EAAC;CAC7C,CAAC;AAMK,MAAM,gBAAgB;;gFAAhB,gBAAgB;6GAAhB,gBAAgB;iHAHjB,iEAAoB,CAAC,MAAM,CAAC,EAC5B,yDAAY;mIAEX,gBAAgB,oFAFjB,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;IEblB,wEAA4C;IACW,sEAAW;IAAA,4DAAI;;;IAEtE,wEAAgD;IACG,0EAAe;IAAA,4DAAI;;;IAGpE,wEAAsE;IAAA,+DAAI;IAAA,4DAAI;;;IAIlF,yEAAmD;IAEY,kEAAO;IAAA,4DAAI;IAExE,wEAAqB;IACkC,gEAAK;IAAA,4DAAI;;;;IAIlE,yEAAkD;IAEW,uDAAc;IAAA,4DAAI;IAE7E,wEAAqB;IACM,qRAAS,yEAAQ,KAAC;IAAC,iEAAM;IAAA,4DAAI;;;IAHG,0DAAc;IAAd,gFAAc;;ADpBxE,MAAM,YAAY;IASvB,YACU,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QATlD,UAAK,GAAG,sBAAsB,CAAC;QAEvB,UAAK,GAAa,EAAE,CAAC;QAC7B,eAAU,GAAY,KAAK,CAAC;QAC5B,mBAAc,GAAY,KAAK,CAAC;QAChC,uBAAkB,GAAY,KAAK,CAAC;IAMpC,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,IAAI,GAAsB,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC;YACnE,0BAA0B;YAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC;YACvD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC;YAC/D,IAAI,IAAI,EAAE;gBACR,IAAI,SAAS,IAAI,IAAI,EAAE;oBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU;iBACxC;aACF;SACF;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE;QAClC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;IAC1B,CAAC;;wEA/BU,YAAY;0GAAZ,YAAY;QCTzB,yEAAc;QAEwB,oEAAS;QAAA,4DAAK;QAChD,wEAAyD;QAEF,gEAAK;QAAA,4DAAI;QAE9D,sGAEK;QACL,sGAEK;QACL,yEAAqB;QACnB,sGAA8E;QAChF,4DAAK;QAGP,wGAOK;QAEL,wGAOK;QACP,4DAAM;QAEN,0EAAuB;QACrB,4EAA+B;QACjC,4DAAM;;QAhCoB,0DAAoB;QAApB,oFAAoB;QAGpB,0DAAwB;QAAxB,wFAAwB;QAIV,0DAAgB;QAAhB,gFAAgB;QAItB,0DAAiB;QAAjB,iFAAiB;QASjB,0DAAgB;QAAhB,gFAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BM;AAEF;AACT;AACqB;AACS;AACH;AACT;AACoB;AACH;AACe;AACjC;AACS;AACsB;AACxC;;AAwBhD,MAAM,SAAS;;kEAAT,SAAS;uGAAT,SAAS,cAFR,wDAAY;4GADb,wFAAmB,YAP5B,qEAAa;QACb,iEAAgB;QAChB,wDAAW;QACX,mEAAgB;QAChB,kEAAS;QACT,gEAAmB;oIAKV,SAAS,mBApBlB,wDAAY;QACZ,6EAAc;QACd,sFAAiB;QACjB,mFAAgB;QAChB,0EAAa;QACb,8FAAmB;QACnB,2FAAkB;QAClB,0GAAuB,aAGvB,qEAAa;QACb,iEAAgB;QAChB,wDAAW;QACX,mEAAgB;QAChB,kEAAS;QACT,gEAAmB;;;;;;;;;;;;;;;;;AC1BhB,MAAM,mBAAmB;IAG9B,gBACI,CAAC;IAEL,QAAQ;IAER,CAAC;;sFARU,mBAAmB;iHAAnB,mBAAmB;QCRhC,yEAAuB;QACrB,uEACS;QACX,4DAAM;;;;;;;;;;;;;;;;;;ACIC,MAAM,uBAAuB;IAElC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8FALU,uBAAuB;qHAAvB,uBAAuB;QCPpC,oEAAG;QAAA,iFAAsB;QAAA,4DAAI;;;;;;;;;;;;;;;;;;;;;;;IEA7B,yEAAqD;IAG1B,uDAAc;IAAA,4DAAK;IAC1C,kEACI;IACJ,wEAAuB;IAEuB,uEAAY;IAAA,0EAAsB;IAAA,wDAA2B;IAAA,4DAAO;IAGhH,yEAA4C;IACA,yEAAa;IAAA,2EAAsB;IAAA,wDAA4B;IAAA,4DAAO;IAGlH,yEAA4C;IACA,uEAAW;IAAA,2EAAsB;IAAA,wDAA0B;IAAA,4DAAO;IAE9G,yEAA6B;IACe,iEAAK;IAAA,2EAAsB;IAAA,wDAAoB;IAAA,4DAAO;IAGpG,uEAAK;IACiD,wEAAY;IAAA,4DAAI;;;IApB/C,0DAAc;IAAd,kFAAc;IAK2C,0DAA2B;IAA3B,+FAA2B;IAI1B,0DAA4B;IAA5B,gGAA4B;IAI9B,0DAA0B;IAA1B,8FAA0B;IAGhC,0DAAoB;IAApB,wFAAoB;IAIxF,0DAAkB;IAAlB,2EAAkB;;ADdpB,MAAM,kBAAkB;IAO7B,gBACI,CAAC;IAEL,QAAQ;IACR,CAAC;;oFAXU,kBAAkB;gHAAlB,kBAAkB;QCT/B,+GA0BM;;QA1BA,0EAAU;;;;;;;;;;;;;;;;;;;;;;;;;IECd,iEAAqD;;;IACrD,iEAAoD;;;IAUpD,sEAAK;IACA,gEAAK;IAAA,4DAAI;;;IAUZ,+EAAkF;;;IAA/B,yEAAa;;;IALlE,sEAAK;IACA,wEAAa;IAAA,4DAAI;IAEtB,yEAC+B;IAC7B,6IAAkF;IACpF,4DAAM;;;IAD6B,0DAAgB;IAAhB,yFAAgB;;ADd9C,MAAM,aAAa;IAIxB,YACU,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAElC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;YACpC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;gBACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO;YACnC,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;YACpD,CAAC;SACF,CAAC;IACJ,CAAC;;0EAlBU,aAAa;2GAAb,aAAa;QCT1B,yEAAuB;QACrB,yGAAqD;QACrD,yGAAoD;QAOtD,4DAAM;QAEN,qMAIc;QAEd,qMAQc;;;;QAxBN,0DAAoB;QAApB,mFAAoB;QACpB,0DAAqB;QAArB,oFAAqB;;;;;;;;;;;;;;;;;;;;;;ACDyB;;;;;;;;;ICClD,6EAOC;IAJC,iSAAY,oFAAmB,iBAAU,KAAC;IAK1C,yEAAwB;IACH,gEAAK;IAAA,4DAAQ;IAChC,sEAOE;IAQJ,4DAAM;IACN,yEAAwB;IACA,mEAAQ;IAAA,4DAAQ;IACtC,uEAQE;IAWJ,4DAAM;IACN,0EAAwB;IAEpB,mEACF;IAAA,4DAAS;;;IA7CT,uFAAuB;;;IA0D3B,0EAA4D;IACtD,uDAAmE;IAAA,4DAAI;;;IAAvE,0DAAmE;IAAnE,yJAAmE;;ADvDtE,MAAM,cAAc;IAYzB,YACU,WAAwB,EACxB,WAAwB,EACxB,YAAiC;QAFjC,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,iBAAY,GAAZ,YAAY,CAAqB;QAb3C,cAAS,GAAc,IAAI,qDAAS,CAAC;YACnC,KAAK,EAAE,IAAI,uDAAW,CAAC,eAAe,CAAC;YACvC,QAAQ,EAAE,IAAI,uDAAW,CAAC,MAAM,CAAC;SAClC,CAAC;QACF,eAAU,GAAG,KAAK,CAAC;QACnB,kBAAa,GAAG,KAAK,CAAC;QACtB,WAAM,GAAG,EAAE;QAEX,UAAK,GAAa,EAAE,CAAC;IAOrB,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,EAAE;YACtC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACxC,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,IAAI,GAAG,IAAI;aACjB;YACD,IAAI,CAAC,UAAU,GAAG,IAAI;SACvB;IACH,CAAC;IAED,QAAQ;QACN,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;QACtD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,SAAS,CAC/C;YACE,IAAI,EAAE,CAAC,KAAK,EAAE,EAAE;gBACd,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC;gBACnC,IAAI,CAAC,aAAa,GAAG,KAAK;gBAC1B,IAAI,CAAC,UAAU,GAAG,IAAI;gBAEtB,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;oBACrC,IAAI,EAAE,CAAC,KAAK,EAAE,EAAE;wBACd,IAAI,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC3B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC;wBAChC,IAAI,CAAC,IAAI,GAAG,IAAI;oBAClB,CAAC;oBACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;wBACb,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;wBAChC,IAAI,CAAC,aAAa,GAAG,IAAI;oBAC3B,CAAC;iBACF,CAAC;YACJ,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;gBAChC,IAAI,CAAC,aAAa,GAAG,IAAI;YAC3B,CAAC;SACF,CACF;IAEH,CAAC;;4EAzDU,cAAc;4GAAd,cAAc;QCZ3B,yEAAuB;QAEnB,6GA8DO;QAEP,0GAEM;QACR,4DAAM;;QAlED,0DAAiB;QAAjB,iFAAiB;QA+Dc,0DAAwB;QAAxB,4FAAwB;;;;;;;;;;;;;;;;;;;;;;;;;IElE9D,yEAA0D;IAG5C,uDAAoE;IAAA,4DAAS;IAAC,oEACxF;IAAA,4DAAK;IAEP,oEAAG;IACO,iEAAM;IAAA,4DAAS;IACvB,uDACF;IAAA,4DAAI;;;IANQ,0DAAoE;IAApE,0JAAoE;IAK9E,0DACF;IADE,oGACF;;;IAGA,sEAAK;IAED,0EACF;IAAA,4DAAI;;ADLD,MAAM,gBAAgB;IAI3B,YACU,WAAwB,EACxB,mBAAwC;QADxC,gBAAW,GAAX,WAAW,CAAa;QACxB,wBAAmB,GAAnB,mBAAmB,CAAqB;IAElD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;YACrC,IAAI,EAAC,CAAC,KAAK,EAAC,EAAE;gBACZ,MAAM,IAAI,GAAc,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;gBACxC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC;YACzC,CAAC;YACD,KAAK,EAAC,CAAC,KAAK,EAAC,EAAE,GAAC,CAAC;SAClB,CAAC;IACJ,CAAC;;gFAlBU,gBAAgB;8GAAhB,gBAAgB;QCV7B,6GAUM;QACN,wMAMc;;;QAjBU,iFAAkB;;;;;;;;;;;;;;;;;;;;ACEY;;;;;;;ICAlD,0EAAyF;IAAnC,oSAAY,2EAAU,KAAC;IAC3E,yEAAwB;IACH,gEAAK;IAAA,4DAAQ;IAChC,sEAA0F;IAC1F,2EAAsB;IAAA,mEAAQ;IAAA,4DAAQ;IACtC,sEAA0F;IAC1F,2EAAiB;IAAA,8DAAG;IAAA,4DAAQ;IAC5B,wEAAgF;IAChF,6EAAwB;IAAA,sEAAU;IAAA,4DAAQ;IAC1C,wEAA8F;IAC9F,6EAAyB;IAAA,uEAAW;IAAA,4DAAQ;IAC5C,wEAAgG;IAChG,6EAAuB;IAAA,qEAAS;IAAA,4DAAQ;IACxC,wEAA4F;IAC9F,4DAAM;IACN,0EAAwB;IACoB,mEAAO;IAAA,4DAAS;;;IAhBxD,0FAA0B;;ADQ7B,MAAM,iBAAiB;IAiB5B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAf5C,iBAAY,GAAc,IAAI,qDAAS,CACrC;YACE,KAAK,EAAE,IAAI,uDAAW,CAAC,eAAe,CAAC;YACvC,QAAQ,EAAE,IAAI,uDAAW,CAAC,QAAQ,CAAC;YACnC,UAAU,EAAE,IAAI,uDAAW,CAAC,QAAQ,CAAC;YACrC,WAAW,EAAE,IAAI,uDAAW,CAAC,YAAY,CAAC;YAC1C,SAAS,EAAE,IAAI,uDAAW,CAAC,QAAQ,CAAC;YACpC,GAAG,EAAE,IAAI,uDAAW,CAAC,IAAI,CAAC;SAE3B,CACF,CAAC;QACF,iBAAY,GAAY,IAAI;QAC5B,mBAAc,GAAY,KAAK;QAC/B,WAAM,GAAW,EAAE,CAAC;IAIpB,CAAC;IAED,QAAQ;IACR,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;QAC1C,IAAI,cAAc,GAAe;YAC/B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,OAAO,EAAE;gBACP,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,GAAG,EAAE,IAAI,CAAC,GAAG;aACd;SACF;QACD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC;YAClD,IAAI,EAAC,CAAC,KAAK,EAAE,EAAE;gBACb,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;gBAClB,IAAI,CAAC,YAAY,GAAG,IAAI;gBACxB,IAAI,CAAC,cAAc,GAAG,KAAK;YAC7B,CAAC;YACD,KAAK,EAAC,CAAC,GAAG,EAAC,EAAE;gBACX,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;gBAChB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO;gBAC/B,IAAI,CAAC,cAAc,GAAG,IAAI;YAC5B,CAAC;SACA,CACF;IACH,CAAC;;kFAnDU,iBAAiB;+GAAjB,iBAAiB;QCV9B,yEAAuB;QAEnB,gHAkBO;QACT,4DAAM;;QAnB8B,0DAAkB;QAAlB,kFAAkB;;;;;;;;;;;;;;;;;;ACFD;AAEvD,MAAM,EAAC,GAAG,EAAC,GAAG,kEAAW,CAAC;AAEnB,MAAM,SAAS,GAAG;IACvB,QAAQ,EAAE,GAAG,GAAG,QAAQ;IACxB,KAAK,EAAE,GAAG,GAAG,aAAa;IAC1B,OAAO,EAAE,GAAG,GAAG,qBAAqB;CACrC;AAEM,MAAM,UAAU,GAAG;IACxB,EAAE,EAAE,GAAG,GAAG,WAAW;IACrB,SAAS,EAAE,GAAG,GAAG,YAAY;IAC7B,WAAW,EAAE,GAAG,GAAG,UAAU;IAC7B,YAAY,EAAE,GAAG,GAAG,UAAU;CAC/B;;;;;;;;;;;;;;;ACfD,gFAAgF;AAChF,mEAAmE;AACnE,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,GAAG,EAAC,uBAAuB;CAC5B,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;AChBvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;ACRgB;;;AAO7C,MAAM,WAAW;IAEtB,YACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAE1B,CAAC;IAED,KAAK,CAAC,KAAa,EAAE,QAAgB;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAa,GAAG,qEAAe,EAAE,EAAE,EAAC,KAAK,EAAC,KAAK,EAAE,QAAQ,EAAC,QAAQ,EAAC,CAAC;IAC3F,CAAC;IAED,QAAQ,CAAC,IAAe;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,wEAAkB,EAAE,EAAE,EAAC,GAAG,IAAI,EAAC,CAAC;IAC3D,CAAC;IAED,YAAY,CAAC,KAAY;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAa,GAAG,uEAAiB,EAAE,EAAE,KAAK,CAAC;IAClE,CAAC;;sEAjBU,WAAW;4GAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;;;;;;;;;;;;;;;;ACPgF;;AAM7F,MAAM,SAAS;IACpB,WAAW,CACT,KAA6B,EAC7B,KAA0B;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;;kEALU,SAAS;0GAAT,SAAS,WAAT,SAAS,mBAFR,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;ACCU;AACoE;;;;AAKlG,MAAM,iBAAiB,GAAG,eAAe;AAGlC,MAAM,eAAe;IAK1B,YACU,YAAiC,EACjC,WAAwB;QADxB,iBAAY,GAAZ,YAAY,CAAqB;QACjC,gBAAW,GAAX,WAAW,CAAa;QALlC,iBAAY,GAAG,KAAK;QACZ,wBAAmB,GAAyB,IAAI,iDAAe,CAAM,IAAI,CAAC,CAAC;IAMnF,CAAC;IAED,SAAS,CAAC,OAA6B,EAAE,IAAiB;QACxD,IAAI,OAAO,GAAG,OAAO;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;QACjD,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,gDAAU,CAAC,KAAK,CAAC,EAAE;YAEhD,IAAI,KAAK,YAAY,mEAAiB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;gBACnG,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC;aAC1C;YAED,OAAO,gDAAU,CAAC,KAAK,CAAC;QAC1B,CAAC,CAAC,CACH;IACH,CAAC;IAEO,cAAc,CAAC,OAA6B,EAAE,KAAa;QACjE,OAAO,OAAO,CAAC,KAAK,CAAC,EAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,SAAS,GAAG,KAAK,CAAC,EAAC,CAAC;IAC5F,CAAC;IAED,cAAc,CAAC,OAAyB,EAAE,IAAiB;QACzD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,YAAY,GAAG,IAAI;YACxB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;YACnC,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE;YAEzD,IAAI,aAAa,EAAE;gBACjB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,IAAI,CACtD,+CAAS,CAAC,CAAC,MAAkB,EAAE,EAAE;oBAC/B,IAAI,CAAC,YAAY,GAAG,KAAK;oBAEzB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC;oBACpC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;oBAE7C,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;gBACjE,CAAC,CAAC,CACH;aACF;iBAAM;gBACL,gDAAU,CAAC,CAAC,GAAG,EAAE,EAAE;oBACjB,IAAI,CAAC,YAAY,GAAG,KAAK;oBACzB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;oBAC3B,OAAO,gDAAU,CAAC,GAAG,CAAC;gBACxB,CAAC,CAAC;aACH;SAEF;QACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAClC,4CAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,EAC/B,0CAAI,CAAC,CAAC,CAAC,EACP,+CAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CACvE;IAEH,CAAC;;8EAhEU,eAAe;gHAAf,eAAe,WAAf,eAAe;AAmErB,MAAM,mBAAmB,GAAG;IACjC;QACE,OAAO,EAAE,mEAAiB;QAC1B,QAAQ,EAAE,eAAe;QACzB,KAAK,EAAE,IAAI;KACZ;CACF;;;;;;;;;;;;;;;;;ACrFD,MAAM,SAAS,GAAG,YAAY;AAC9B,MAAM,WAAW,GAAG,eAAe;AACnC,MAAM,QAAQ,GAAG,WAAW;AAOrB,MAAM,mBAAmB;IAE9B;IACA,CAAC;IAED,OAAO;QACL,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAEM,UAAU,CAAC,MAA2C;QAC3D,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC;QACvD,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC;IAC5D,CAAC;IAEM,cAAc;QACnB,OAAO,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC;IACjD,CAAC;IAEM,eAAe;QACpB,OAAO,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC;IACnD,CAAC;IAEM,QAAQ,CAAC,IAAgB;QAC9B,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC;IAEM,OAAO;QACZ,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC;QACpD,IAAI,IAAI,EAAE;YACR,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;SACxB;IACH,CAAC;;sFA/BU,mBAAmB;oHAAnB,mBAAmB,WAAnB,mBAAmB,mBAHlB,MAAM;;;;;;;;;;;;;;;;;;ACLkC;;;AAM/C,MAAM,WAAW;IAEtB,YACU,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IACrB,CAAC;IAEL,QAAQ;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAwB,GAAG,0EAAoB,EAAE,CAAE;IACzE,CAAC;IACD,SAAS;QACP,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAwB,GAAG,mEAAa,EAAE,CAAE;IAClE,CAAC;IAED,WAAW,CAAC,EAAS;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAwB,GAAG,0EAAoB,KAAK,CAAE;IAC5E,CAAC;;sEAfU,WAAW;4GAAX,WAAW,WAAX,WAAW,mBAFV,MAAM","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/board-admin/board-admin.component.ts","./src/app/components/board-admin/board-admin.component.html","./src/app/components/board-moderator/board-moderator.component.ts","./src/app/components/board-moderator/board-moderator.component.html","./src/app/components/board-user/board-user.component.ts","./src/app/components/board-user/board-user.component.html","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/profile/profile.component.ts","./src/app/components/profile/profile.component.html","./src/app/components/register/register.component.ts","./src/app/components/register/register.component.html","./src/constants/url.constants.ts","./src/environments/environment.ts","./src/main.ts","./src/services/auth.service.ts","./src/services/guards/user.guard.ts","./src/services/interceptors/auth.interceptor.ts","./src/services/token-storage.service.ts","./src/services/user.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport {HomeComponent} from \"./components/home/home.component\";\r\nimport {LoginComponent} from \"./components/login/login.component\";\r\nimport {RegisterComponent} from \"./components/register/register.component\";\r\nimport {BoardUserComponent} from \"./components/board-user/board-user.component\";\r\nimport {UserGuard} from \"../services/guards/user.guard\";\r\n\r\nconst routes: Routes = [\r\n  {path:'home',component:HomeComponent},\r\n  {path:'login',component:LoginComponent,canActivate:[UserGuard]},\r\n  {path:'register',component:RegisterComponent,canActivate:[UserGuard]},\r\n  {path:'user',component:BoardUserComponent},\r\n  {path:'patient',component:HomeComponent},\r\n  {path:'admin',component:HomeComponent},\r\n  {path:'',redirectTo:'home',pathMatch:'full'},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {TokenStorageService} from \"../services/token-storage.service\";\r\nimport {IUserModel} from \"../models/IUser\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.sass']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'health_care_frontend';\r\n\r\n  private roles: string[] = [];\r\n  isLoggedIn: boolean = false;\r\n  showAdminBoard: boolean = false;\r\n  showModeratorBoard: boolean = false;\r\n  username?: string;\r\n\r\n  constructor(\r\n    private tokenStorageService: TokenStorageService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.isLoggedIn) {\r\n      const user: IUserModel | void = this.tokenStorageService.getUser();\r\n      // this.roles = user.roles\r\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN')\r\n      this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR')\r\n      if (user) {\r\n        if (\"profile\" in user) {\r\n          this.username = user.profile.first_name\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  logOut(){\r\n    this.tokenStorageService.signOut()\r\n    window.location.reload()\r\n  }\r\n\r\n}\r\n","<div id=\"app\">\r\n  <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n    <h3 class=\"navbar-brand noselect\">DocHealth</h3>\r\n    <ul class=\"navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/home\" class=\"nav-link\" routerLink=\"home\">Home </a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showAdminBoard\">\r\n        <a href=\"/admin\" class=\"nav-link\" routerLink=\"admin\">Admin Board</a>\r\n      </li>\r\n      <li class=\"nav-item\" *ngIf=\"showModeratorBoard\">\r\n        <a href=\"/mod\" class=\"nav-link\" routerLink=\"mod\">Moderator Board</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/user\" class=\"nav-link\" *ngIf=\"isLoggedIn\" routerLink=\"user\">User</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"!isLoggedIn\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/register\" class=\"nav-link\" routerLink=\"register\">Sign Up</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href=\"/login\" class=\"nav-link\" routerLink=\"login\">Login</a>\r\n      </li>\r\n    </ul>\r\n\r\n    <ul class=\"navbar-nav ml-auto\" *ngIf=\"isLoggedIn\">\r\n      <li class=\"nav-item\">\r\n        <a href=\"/profile\" class=\"nav-link\" routerLink=\"profile\">{{ username }}</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a href class=\"nav-link\" (click)=\"logOut()\">LogOut</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { BoardAdminComponent } from './components/board-admin/board-admin.component';\r\nimport { BoardUserComponent } from './components/board-user/board-user.component';\r\nimport { BoardModeratorComponent } from './components/board-moderator/board-moderator.component';\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\r\nimport {AuthInterceptor, AuthServiceProvider} from \"../services/interceptors/auth.interceptor\";\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    ProfileComponent,\r\n    HomeComponent,\r\n    BoardAdminComponent,\r\n    BoardUserComponent,\r\n    BoardModeratorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgbModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  providers: AuthServiceProvider,\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\nimport {UserService} from \"../../../services/user.service\";\n\n@Component({\n  selector: 'app-board-admin',\n  templateUrl: './board-admin.component.html',\n  styleUrls: ['./board-admin.component.sass']\n})\nexport class BoardAdminComponent implements OnInit {\n\n\n  constructor(\n  ) { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n","<div class=\"container\">\n  <header class=\"jumbotron\">\n  </header>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-board-moderator',\n  templateUrl: './board-moderator.component.html',\n  styleUrls: ['./board-moderator.component.sass']\n})\nexport class BoardModeratorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>board-moderator works!</p>\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {IUserModel} from \"../../../models/IUser\";\r\n\r\n@Component({\r\n  selector: 'app-board-user',\r\n  templateUrl: './board-user.component.html',\r\n  styleUrls: ['./board-user.component.sass']\r\n})\r\nexport class BoardUserComponent implements OnInit {\r\n\r\n  // content?:any[];\r\n\r\n  @Input()\r\n  user?: IUserModel;\r\n\r\n  constructor(\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<div *ngIf=\"user\" class=\"card\" style=\"width: 18rem;\">\r\n  <!--  <img src=\"...\" class=\"card-img-top\" alt=\"...\">-->\r\n  <div class=\"card-body\">\r\n    <h5 class=\"card-title\">{{user.email}}</h5>\r\n    <p class=\"card-text\">\r\n    </p>\r\n    <ul class=\"list-group\">\r\n      <li class=\"list-group-item text-capitalize\">\r\n        <p class=\"d-flex justify-content-between\">First name: <span class=\"fw-bold\">{{user.profile.first_name}}</span>\r\n        </p>\r\n      </li>\r\n      <li class=\"list-group-item text-capitalize\">\r\n        <p class=\"d-flex justify-content-between\">Second name: <span class=\"fw-bold\">{{user.profile.second_name}}</span>\r\n        </p>\r\n      </li>\r\n      <li class=\"list-group-item text-capitalize\">\r\n        <p class=\"d-flex justify-content-between\">Last name: <span class=\"fw-bold\">{{user.profile.last_name}}</span></p>\r\n      </li>\r\n      <li class=\"list-group-item \">\r\n        <p class=\"d-flex justify-content-between\">Age: <span class=\"fw-bold\">{{user.profile.age}}</span></p>\r\n      </li>\r\n    </ul>\r\n    <div>\r\n      <a [routerLink]=\"'#'\"  class=\"btn btn-primary mt-2\">USER PROFILE</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {IUserModel} from \"../../../models/IUser\";\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.sass']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  list_of_users?: IUserModel[];\r\n\r\n  constructor(\r\n    private UserService: UserService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.UserService.getUsers().subscribe({\r\n      next: (data) => {\r\n        this.list_of_users = data.results\r\n      },\r\n      error: (err) => {\r\n        this.list_of_users = JSON.parse(err.error.message)\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <div *ngIf=\"list_of_users else welcome_screen\"></div>\r\n  <div *ngIf=\"!list_of_users else users_screen\"></div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>\r\n\r\n<ng-template #welcome_screen>\r\n  <div>\r\n    <p>Hello</p>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #users_screen>\r\n  <div>\r\n    <p>List of users</p>\r\n  </div>\r\n  <div class=\"container d-flex flex-wrap gap-1 justify-content-start\"\r\n       style=\"margin-top: 120px\">\r\n    <app-board-user *ngFor=\"let user of list_of_users\" [user]=\"user\"></app-board-user>\r\n  </div>\r\n</ng-template>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {FormControl, FormGroup} from \"@angular/forms\";\r\nimport {AuthService} from \"../../../services/auth.service\";\r\nimport {TokenStorageService} from \"../../../services/token-storage.service\";\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {IUserModel} from \"../../../models/IUser\";\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.sass']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  formLogin: FormGroup = new FormGroup({\r\n    email: new FormControl('111@gmail.com'),\r\n    password: new FormControl('1111')\r\n  })\r\n  isLoggedIn = false;\r\n  isLoginFailed = false;\r\n  errMsg = ''\r\n  user: IUserModel;\r\n  roles: string[] = [];\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private userService: UserService,\r\n    private tokenStorage: TokenStorageService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.tokenStorage.getAccessToken()) {\r\n      const user = this.tokenStorage.getUser()\r\n      if (user) {\r\n        this.user = user\r\n      }\r\n      this.isLoggedIn = true\r\n    }\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const {email, password} = this.formLogin.getRawValue()\r\n    this.authService.login(email, password).subscribe(\r\n      {\r\n        next: (value) => {\r\n          this.tokenStorage.SaveTokens(value)\r\n          this.isLoginFailed = false\r\n          this.isLoggedIn = true\r\n\r\n          this.userService.getMeUser().subscribe({\r\n            next: (value) => {\r\n              let user = value.results[0]\r\n              this.tokenStorage.saveUser(user)\r\n              this.user = user\r\n            },\r\n            error: (err) => {\r\n              this.errMsg = err.error.message;\r\n              this.isLoginFailed = true\r\n            }\r\n          })\r\n        },\r\n        error: (err) => {\r\n          this.errMsg = err.error.message;\r\n          this.isLoginFailed = true\r\n        },\r\n      }\r\n    )\r\n\r\n  }\r\n}\r\n","<div class=\"col-md-12\">\n  <div class=\"card card-container\">\n    <form\n      *ngIf=\"!isLoggedIn\"\n      name=\"form\"\n      (ngSubmit)=\"formLogin.valid && onSubmit()\"\n      #f=\"ngForm\"\n      novalidate\n        [formGroup]=\"formLogin\"\n    >\n      <div class=\"form-group\">\n        <label for=\"email\">Email</label>\n        <input\n          id=\"email\"\n          type=\"text\"\n          class=\"form-control\"\n          name=\"username\"\n          formControlName=\"email\"\n          required\n        />\n<!--        <div-->\n<!--          class=\"alert alert-danger\"-->\n<!--          role=\"alert\"-->\n<!--          *ngIf=\"username.errors && f.submitted\"-->\n<!--        >-->\n<!--          Username is required!-->\n<!--        </div>-->\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          formControlName=\"password\"\n          required\n          minlength=\"4\"\n        />\n<!--        <div-->\n<!--          class=\"alert alert-danger\"-->\n<!--          role=\"alert\"-->\n<!--          *ngIf=\"password.errors && f.submitted\"-->\n<!--        >-->\n<!--          <div *ngIf=\"password.errors.required\">Password is required</div>-->\n<!--          <div *ngIf=\"password.errors.minlength\">-->\n<!--            Password must be at least 6 characters-->\n<!--          </div>-->\n<!--        </div>-->\n      </div>\n      <div class=\"form-group\">\n        <button class=\"btn btn-primary btn-block\">\n          Login\n        </button>\n      </div>\n<!--      <div class=\"form-group\">-->\n<!--        <div-->\n<!--          class=\"alert alert-danger\"-->\n<!--          role=\"alert\"-->\n<!--          *ngIf=\"f.submitted && isLoginFailed\"-->\n<!--        >-->\n<!--          Login failed: {{ errMsg }}-->\n<!--        </div>-->\n<!--      </div>-->\n    </form>\n\n    <div class=\"alert alert-success\" *ngIf=\"isLoggedIn && user\">\n      <p >Logged in as {{user.profile.first_name}} {{user.profile.last_name}}</p>\n    </div>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {TokenStorageService} from \"../../../services/token-storage.service\";\r\nimport {IUserModel} from \"../../../models/IUser\";\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.sass']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n  currentUser: IUserModel;\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private tokenStorageService: TokenStorageService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getMeUser().subscribe({\r\n      next:(value)=>{\r\n        const user:IUserModel = value.results[0]\r\n        this.tokenStorageService.saveUser(user)\r\n      },\r\n      error:(value)=>{}\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"container\" *ngIf=\"currentUser;else loggedOut\">\r\n  <header class=\"jumbotron\">\r\n    <h3>\r\n      <strong>{{currentUser.profile.first_name}} {{currentUser.profile.last_name}}</strong> Profile\r\n    </h3>\r\n  </header>\r\n  <p>\r\n    <strong>Email:</strong>\r\n    {{currentUser.email}}\r\n  </p>\r\n</div>\r\n<ng-template #loggedOut>\r\n  <div>\r\n    <p>\r\n      Please login.\r\n    </p>\r\n  </div>\r\n</ng-template>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AuthService} from \"../../../services/auth.service\";\r\nimport {FormControl, FormGroup} from \"@angular/forms\";\r\nimport {IUserModel} from \"../../../models/IUser\";\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.sass']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  registerForm: FormGroup = new FormGroup(\r\n    {\r\n      email: new FormControl('118@gmail.com'),\r\n      password: new FormControl('111111'),\r\n      first_name: new FormControl('serhiy'),\r\n      second_name: new FormControl('terlotskiy'),\r\n      last_name: new FormControl('andriy'),\r\n      age: new FormControl('18'),\r\n\r\n    }\r\n  );\r\n  isSuccessful: boolean = true\r\n  isSignUpFailed: boolean = false\r\n  errMsg: string = '';\r\n\r\n  constructor(private authService: AuthService) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit() {\r\n    let user = this.registerForm.getRawValue()\r\n    let user_formatted: IUserModel = {\r\n      email: user.email,\r\n      password: user.password,\r\n      profile: {\r\n        first_name: user.first_name,\r\n        second_name: user.second_name,\r\n        last_name: user.last_name,\r\n        age: user.age,\r\n      }\r\n    }\r\n    console.log(user_formatted)\r\n    this.authService.register(user_formatted).subscribe({\r\n      next:(value) => {\r\n        console.log(user_formatted)\r\n        console.log(value)\r\n        this.isSuccessful = true\r\n        this.isSignUpFailed = false\r\n      },\r\n      error:(err)=>{\r\n        console.log(err)\r\n        this.errMsg = err.error.message\r\n        this.isSignUpFailed = true\r\n      }\r\n      }\r\n    )\r\n  }\r\n}\r\n","<div class=\"col-md-12\">\r\n  <div class=\"card\">\r\n    <form [formGroup]=\"registerForm\" *ngIf=\"isSuccessful\" (ngSubmit)=\"onSubmit()\" novalidate>\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"text\" id=\"email\" class=\"form-control\" required email formControlName=\"email\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"text\" id=\"password\" class=\"form-control\" required formControlName=\"password\">\r\n        <label for=\"age\">Age</label>\r\n        <input type=\"text\" id=\"age\" class=\"form-control\" required formControlName=\"age\">\r\n        <label for=\"first_name\">First name</label>\r\n        <input type=\"text\" id=\"first_name\" class=\"form-control\" required formControlName=\"first_name\">\r\n        <label for=\"second_name\">Second name</label>\r\n        <input type=\"text\" id=\"second_name\" class=\"form-control\" required formControlName=\"second_name\">\r\n        <label for=\"last_name\">Last name</label>\r\n        <input type=\"text\" id=\"last_name\" class=\"form-control\" required formControlName=\"last_name\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n","import {environment} from \"../environments/environment\"\r\n\r\nconst {URL} = environment;\r\n\r\nexport const user_urls = {\r\n  register: `${URL}/users`,\r\n  login: `${URL}/auth/token`,\r\n  refresh: `${URL}/auth/token/refresh`\r\n}\r\n\r\nexport const boards_url = {\r\n  me: `${URL}/users/me`,\r\n  all_users: `${URL}/users/all`,\r\n  all_doctors: `${URL}/doctors`,\r\n  all_patients: `${URL}/patient`,\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  URL:'http://localhost:8000'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {user_urls} from '../constants/url.constants'\r\nimport {IUserModel} from \"../models/IUser\";\r\nimport {ITokenPair} from \"../models/ITokenPair\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  login(email: string, password: string): Observable<ITokenPair> {\r\n    return this.http.post<ITokenPair>(`${user_urls.login}`, {email:email, password:password})\r\n  }\r\n\r\n  register(user:IUserModel):Observable<any>{\r\n    return this.http.post(`${user_urls.register}`, {...user})\r\n  }\r\n\r\n  refreshToken(token:string):Observable<ITokenPair>{\r\n    return this.http.post<ITokenPair>(`${user_urls.refresh}`, token)\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserGuard implements CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n  \n}\n","import {Injectable} from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor, HTTP_INTERCEPTORS, HttpErrorResponse\n} from '@angular/common/http';\nimport {BehaviorSubject, catchError, filter, Observable, switchMap, take, throwError} from 'rxjs';\nimport {TokenStorageService} from \"../token-storage.service\";\nimport {AuthService} from \"../auth.service\";\nimport {ITokenPair} from \"../../models/ITokenPair\";\n\nconst TOKEN_HEADER_TYPE = 'Authorization'\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  isRefreshing = false\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private tokenStorage: TokenStorageService,\n    private authService: AuthService\n  ) {\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let authReq = request\n    const token = this.tokenStorage.getAccessToken();\n    if (token != null) {\n      authReq = this.AddTokenHeader(request, token)\n    }\n    return next.handle(authReq).pipe(catchError(error => {\n\n        if (error instanceof HttpErrorResponse && !authReq.url.includes('register') && error.status === 401) {\n          return this.handle401error(authReq, next)\n        }\n\n        return throwError(error)\n      })\n    )\n  }\n\n  private AddTokenHeader(request: HttpRequest<unknown>, token: string) {\n    return request.clone({headers: request.headers.set(TOKEN_HEADER_TYPE, 'Bearer ' + token)})\n  }\n\n  handle401error(request: HttpRequest<any>, next: HttpHandler) {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true\n      this.refreshTokenSubject.next(null)\n      const refresh_token = this.tokenStorage.getRefreshToken()\n\n      if (refresh_token) {\n        return this.authService.refreshToken(refresh_token).pipe(\n          switchMap((tokens: ITokenPair) => {\n            this.isRefreshing = false\n\n            this.tokenStorage.SaveTokens(tokens)\n            this.refreshTokenSubject.next(tokens.refresh)\n\n            return next.handle(this.AddTokenHeader(request, tokens.access))\n          }),\n        )\n      } else {\n        catchError((err) => {\n          this.isRefreshing = false\n          this.tokenStorage.signOut()\n          return throwError(err)\n        })\n      }\n\n    }\n    return this.refreshTokenSubject.pipe(\n      filter(token => token !== null),\n      take(1),\n      switchMap((token) => next.handle(this.AddTokenHeader(request, token)))\n    )\n\n  }\n}\n\nexport const AuthServiceProvider = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptor,\n    multi: true,\n  }\n]\n","import {Injectable} from '@angular/core';\r\nimport {IUserModel} from \"../models/IUser\";\r\n\r\nconst TOKEN_KEY = 'auth_token'\r\nconst REFRESH_KEY = 'refresh_token'\r\nconst USER_KEY = 'auth_user'\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class TokenStorageService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  signOut() {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  public SaveTokens(tokens: { access: string, refresh: string }) {\r\n    window.sessionStorage.setItem(TOKEN_KEY, tokens.access)\r\n    window.sessionStorage.setItem(REFRESH_KEY, tokens.refresh)\r\n  }\r\n\r\n  public getAccessToken(): string | null {\r\n    return window.sessionStorage.getItem(TOKEN_KEY)\r\n  }\r\n\r\n  public getRefreshToken(): string | null {\r\n    return window.sessionStorage.getItem(REFRESH_KEY)\r\n  }\r\n\r\n  public saveUser(user: IUserModel): void {\r\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user))\r\n  }\r\n\r\n  public getUser(): IUserModel | void {\r\n    const user = window.sessionStorage.getItem(USER_KEY)\r\n    if (user) {\r\n      return JSON.parse(user)\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {IUserModel} from \"../models/IUser\";\r\nimport {boards_url} from \"../constants/url.constants\";\r\nimport {IResponse} from \"../models/IResponse\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(\r\n    private http:HttpClient\r\n  ) { }\r\n\r\n  getUsers():Observable<IResponse<IUserModel>>{\r\n    return this.http.get<IResponse<IUserModel>>(`${boards_url.all_users}`,)\r\n  }\r\n  getMeUser():Observable<IResponse<IUserModel>>{\r\n    return this.http.get<IResponse<IUserModel>>(`${boards_url.me}`,)\r\n  }\r\n\r\n  getUserById(id:string):Observable<IResponse<IUserModel>>{\r\n    return this.http.get<IResponse<IUserModel>>(`${boards_url.all_users}/id`,)\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}